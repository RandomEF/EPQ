// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture; // sampler + _SkyboxTexture
static const float PI = 3.14159265f;
float4 _DirectionalLight;

float _maxBounceNumber;
float2 _PixelOffset;

struct Ray {
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit {
    float3 position;
    float3 normal;
    float distance;
    float3 specular;
    float3 albedo;
};

struct Sphere {
    float3 position;
    float radius;
    float3 specular;
    float3 albedo;
};

StructuredBuffer<Sphere> _Spheres;

Ray CreateRay(float3 origin, float3 direction){
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 UV){
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz; //Camera origin to world space

    float3 direction = mul(_CameraInverseProjection, float4(UV, 0, 1)).xyz; //Invert perspective projection of view space pos
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz; //Direction from camera to world space
    direction = normalize(direction); //Normalize

    return CreateRay(origin, direction);
}

RayHit CreateRayHit(){
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit){ // inout allows the original variable to be rewritten with the data inside the function
    float angleSign = -ray.origin.y / ray.direction.y;
    if (angleSign > 0 && angleSign < bestHit.distance){
        bestHit.distance = angleSign;
        bestHit.position = ray.origin + angleSign * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = float3(0.5f, 0.5f, 0.5f);
        bestHit.specular = float3(0.4f, 0.4f, 0.4f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere){
/*
    float3 distance = ray.origin - sphere.position;
    float projectedDistanceOnRay = dot(ray.direction, distance);
    float radiusSquared = sphere.radius * sphere.radius;
    float distanceMidpointToCentre = dot(distance, distance) - projectedDistanceOnRay * projectedDistanceOnRay;
    if (length(distance) < 0.0f){
        return;
    }
    if (distanceMidpointToCentre < radiusSquared){
        float3 distanceFromPointToMid = sqrt(radiusSquared - distance * distance + projectedDistanceOnRay * projectedDistanceOnRay);
        float pointCheck = projectedDistanceOnRay - distanceFromPointToMid > 0 ? projectedDistanceOnRay - distanceFromPointToMid : projectedDistanceOnRay + distanceFromPointToMid;
        if (pointCheck > 0 && pointCheck < bestHit.distance) {
            bestHit.distance = pointCheck;
            bestHit.position = ray.origin + pointCheck * ray.direction;
            bestHit.normal = normalize(bestHit.position - sphere.position);
*/
    float3 distance = ray.origin - sphere.position;
    float b = dot(ray.direction, distance);
    float c = dot(distance, distance) - sphere.radius * sphere.radius;
    float discriminant = b * b - c;
    if (discriminant < 0){
        return;
    }
    float discriminantRoot = sqrt(discriminant);
    float pointCheck = -b - discriminantRoot > 0 ? -b - discriminantRoot : -b + discriminantRoot;
    if (pointCheck > 0 && pointCheck < bestHit.distance) {
        bestHit.distance = pointCheck;
        bestHit.position = ray.origin + pointCheck * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.specular = sphere.specular;
        bestHit.albedo = sphere.albedo;
    }
}

Sphere CreateSphere(float3 position, float radius){
    Sphere sphere;
    sphere.position = position;
    sphere.radius = radius;
    sphere.specular = float3(0.01f, 0.01f, 0.01f);
    sphere.albedo = float3(1.0f, 1.0f, 1.0f);
    return sphere;
}

RayHit Trace(Ray ray){
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for (uint i = 0; i < numSpheres; i++){
        IntersectSphere(ray, bestHit, _Spheres[i]);
    }
    /*
    for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            Sphere sphere = CreateSphere(float3(2 * i, 0.5f , 2 * j), 0.5f);
            IntersectSphere(ray, bestHit, sphere);   
        }
    }*/
    
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit){
    if (hit.distance < 1.#INF){
        float3 specular = hit.specular;
        float3 albedo = hit.albedo;
        //float3 specular = float3(0.6f, 0.6f, 0.6f);
        //float3 albedo = float3(0.04f, 0.04f, 0.04f);

        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specular;
        bool shadow = false;
        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
        RayHit shadowRayHit = Trace(shadowRay);
        if (shadowRayHit.distance != 1.#INF){
            return float3(0.0f, 0.0f, 0.0f);
        }
        return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * albedo;
    } else {                                        // Take colour from skybox
        ray.energy = 0.0f;
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0);
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    uint width, height;
    Result.GetDimensions(width, height);
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f); //Pixel to -1,1 range

    Ray ray = CreateCameraRay(uv);

    float3 result = float3(0, 0, 0);
    for (int i = 0; i <= _maxBounceNumber; i++){
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);
        if (!any(ray.energy)){
            break;
        }
    }
    Result[id.xy] = float4(result, 1);
}